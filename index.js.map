{"mappings":";;;;;;ACEA,MAAM,4CAAqB,CAAC,OAC1B,KAAK,GAAG,CAAC,CAAC,SAAY,CAAA;YACpB,OAAO;QACT,CAAA;AAEF,MAAM,4CAA4B,CAAC,MAAgB,IAAI,OAAO,CAAC,QAAQ;AAEvE,MAAM,4CACJ,CAAC,UACD,aAAa;IACb,CAAC,OAA6B,QAAgB,SAAmB;QAC/D,IAAI,OAAO;YACT,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,MAAM,OAAO,CAAC,CAAC;YACrC;QACF,CAAC;QACD,IAAI,QAAQ;YACV,QAAQ,GAAG,CAAC,CAAC,QAAQ,EAAE,OAAO,CAAC;YAC/B;QACF,CAAC;QACD,QAAQ,GAAG,CAAC;IACd;;ADtBF;;AIAA;;;ACAA,MAAM,0CACJ,CAAC,IAAc,aACf,CAAC,GAAG,OAAgB;QAClB,IAAI;YACF,OAAO,MAAM;QACf,EAAE,OAAO,KAAK;YACZ,OAAO,WAAW;QACpB;IACF;AAEF,MAAM,iDAA2B,CAAC,KAChC,wCAAkB,IAAI,CAAC,MAAQ;QAC7B,QAAQ,KAAK,CAAC;IAChB;AAEK,MAAM,4CAAM;;;;ADJnB,MAAM,mCAAa,IAAM;IACvB,IAAI,SAAwB,IAAI;IAEhC,MAAM,UAAU,CAAA,GAAA,yCAAE,EAAE,IAAM;QACxB,MAAM,MAAM,CAAA,GAAA,iBAAS,EAAE,CAAA,GAAA,yCAAgB,AAAD,GAAG;YAAE,KAAK;QAAc;QAC9D,SAAS,KAAK,KAAK,CAAC,CAAA,GAAA,SAAC,EAAE,YAAY,CAAC,KAAe;QACnD,OAAO;IACT;IAEA,OAAO,IAAM,UAAU;AACzB;AAEA,MAAM,kCAAY;AAElB,MAAM,4CAAc,CAAyB,OAAuB;IAClE,MAAM,SAAS;IACf,IAAI,CAAC,QAAQ,MAAM,IAAI,MAAM,CAAC,qCAAqC,CAAC,EAAE;IACtE,IAAI,MAAM,CAAC,KAAK,IAAI,IAAI,EAAE,MAAM,IAAI,MAAM,CAAC,gBAAgB,EAAE,KAAK,SAAS,CAAC,EAAE;IAC9E,OAAO,MAAM,CAAC,KAAK;AACrB;AAEA,MAAM,4CAAiB,IAAgB;IACrC,MAAM,SAAS,0CAAY;IAC3B,OAAO,MAAM,OAAO,CAAC,UAAU,SAAS;QAAC;KAAO;AAClD;AAEA,MAAM,4CAAkB,IAAgB;IACtC,MAAM,SAAS,0CAAY;IAC3B,OAAO,MAAM,OAAO,CAAC,UAAU,SAAS;QAAC;KAAO;AAClD;AAEA,MAAM,4CAAuB,IAC3B,0CAAY,0BAA0B,CAAA,GAAA,yCAA2B,AAAD;AAElE,MAAM,4CAAwB,IAC5B,0CAAY,2BAA2B,CAAA,GAAA,yCAA4B,AAAD;AAEpE,MAAM,4CAAoB,IACxB,0CAAY,mBAAmB,CAAA,GAAA,yCAAwB,AAAD;;ADjDxD;;;;AASA,MAAM,4CAAgB,CAAA,GAAA,yCAAE,EAAE,UAAY;IACpC,MAAM,cAAc,CAAA,GAAA,yCAAc,AAAD;IACjC,IAAI,YAAY,MAAM,KAAK,GAAG,OAAO,WAAW,CAAC,EAAE;IAEnD,MAAM,UAAU,CAAA,GAAA,yCAAiB,EAAE;IACnC,MAAM,WAAW;QACf,SAAS;QACT,MAAM;QACN,MAAM;QACN,SAAS;IACX;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,eAAO,EAAE,MAAM,CAAC;QAAC;KAAS;IAE/C,OAAO,MAAM,CAAC,SAAS,IAAI,CAAC;AAC9B;AAEA,MAAM,4CAAiB,CAAA,GAAA,yCAAE,EAAE,UAAY;IACrC,MAAM,eAAe;IACrB,MAAM,eAAe,CAAA,GAAA,yCAAe,AAAD;IACnC,IAAI,aAAa,MAAM,KAAK,GAAG,OAAO,YAAY,CAAC,EAAE;IAErD,MAAM,UAAU,CAAA,GAAA,yCAAiB,EAAE;IACnC,MAAM,WAAW;QACf,SAAS;QACT,MAAM;QACN,MAAM;QACN,SAAS;IACX;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,eAAO,EAAE,MAAM,CAAC;QAAC;KAAS;IAE/C,OAAO,MAAM,CAAC,aAAa;AAC7B;AAEA,MAAM,4CAAgB,CAAA,GAAA,yCAAE,EAAE,UAAY;IACpC,MAAM,WAAW;QACf,SAAS;QACT,MAAM;QACN,MAAM;IACR;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,eAAO,EAAE,MAAM,CAAC;QAAC;KAAS;IAE/C,OAAO,MAAM,CAAC,SAAS,IAAI,CAAC;AAC9B;AAEA,MAAM,4CAAc,CAAA,GAAA,yCAAE,EAAE,UAAY;IAClC,MAAM,WAAW;QACf,SAAS;QACT,MAAM;QACN,MAAM;IACR;IAEA,MAAM,SAAS,MAAM,CAAA,GAAA,eAAO,EAAE,MAAM,CAAC;QAAC;KAAS;IAC/C,MAAM,YAAY,CAAA,GAAA,yCAAoB,AAAD;IAErC,OAAO,MAAM,CAAC,SAAS,IAAI,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,QAAQ;AACtD;;ADnEA;AAQA,MAAM,4CAAmB;AAEzB,MAAM,4CAA8B;AACpC,MAAM,4CACJ;AACF,MAAM,4CAA2B,KAAK;AAEtC,MAAM,4CAAmD;IACvD,aAAa,CAAA,GAAA,yCAAY;IACzB,cAAc,CAAA,GAAA,yCAAa;IAC3B,SAAS,CAAA,GAAA,yCAAY;IACrB,WAAW,CAAA,GAAA,yCAAU;AACvB;;;;;AFbA,MAAM,gDAA0B,CAAA,GAAA,yCAAE,EAAE,UAAY;IAC9C,MAAM,qBAAqB,CAAA,GAAA,yCAAqB,AAAD;IAC/C,MAAM,aAAa,mBAAmB,KAAK,CAAC,cAAc,EAAE;IAE5D,IAAI,SAAS;IAEb,WAAW,MAAM,YAAY,WAAY;QACvC,MAAM,eAAe,CAAA,GAAA,yCAAwB,EAAE;QAC/C,MAAM,gBAAgB,MAAM,CAAA,GAAA,yCAAW,CAAC,CAAC,aAAgC;QACzE,MAAM,SAAS,gBACX,IAAI,OAAO,UAAU,QACrB,IAAI,OAAO,CAAC,EAAE,SAAS,IAAI,CAAC,EAAE,KAAK;QACvC,SAAS,OAAO,OAAO,CAAC,QAAQ,iBAAiB;IACnD;IAEA,OAAO;AACT;AAEA,MAAM,8BAAQ,UAAY;IACxB,MAAM,uBAAuB,MAAM;IACnC,MAAM,iBAAiB,CAAA,GAAA,yCAAiB,AAAD;IACvC,MAAM,aAAa,iBAAiB,gBAAgB,QAAQ;IAE5D,MAAM,cAAc,CAAC,IAAI,EAAE,WAAW,CAAC,EAAE,qBAAqB,CAAC;IAE/D,CAAA,GAAA,WAAI,AAAD,EAAE,aAAa,CAAA,GAAA,yCAAe,AAAD,EAAE;AACpC;AAEA","sources":["src/index.ts","src/utils/helpers.ts","src/constants.ts","src/utils/property_getters.ts","src/utils/json_getters.ts","src/utils/tcd.ts"],"sourcesContent":["import { createResultLog, removeNonLetterCharacters } from \"./utils/helpers\";\nimport { exec } from \"child_process\";\nimport { PartsBranchName } from \"./types\";\nimport { PROPERTY_MAP } from \"./constants\";\nimport { tcd } from \"./utils/tcd\";\nimport { getBranchNameTemplate, getIsAutoCheckout } from \"./utils/json_getters\";\n\nconst getBranchNameByTemplate = tcd(async () => {\n  const branchNameTemplate = getBranchNameTemplate();\n  const properties = branchNameTemplate.match(/<\\w*>/gi) ?? [];\n\n  let result = branchNameTemplate;\n\n  for await (const property of properties) {\n    const propertyName = removeNonLetterCharacters(property);\n    const propertyValue = await PROPERTY_MAP[propertyName as PartsBranchName]();\n    const regExp = propertyValue\n      ? new RegExp(property, \"gi\")\n      : new RegExp(`${property}?\\\\W`, \"gi\");\n    result = result.replace(regExp, propertyValue || \"\");\n  }\n\n  return result;\n});\n\nconst index = async () => {\n  const branchNameByTemplate = await getBranchNameByTemplate();\n  const isAutoCheckout = getIsAutoCheckout();\n  const gitCommand = isAutoCheckout ? \"checkout -b\" : \"branch\";\n\n  const fullCommand = `git ${gitCommand} ${branchNameByTemplate}`;\n\n  exec(fullCommand, createResultLog(fullCommand));\n};\n\nindex();\n","import { ExecException } from \"child_process\";\r\n\r\nconst transformToAnswers = (data: string[]) =>\r\n  data.map((answer) => ({\r\n    value: answer,\r\n  }));\r\n\r\nconst removeNonLetterCharacters = (str: string) => str.replace(/\\W/gi, \"\");\r\n\r\nconst createResultLog =\r\n  (command: string) =>\r\n  // @ts-ignore\r\n  (error: ExecException | null, stdout: string, stderr: string) => {\r\n    if (error) {\r\n      console.log(`error: ${error.message}`);\r\n      return;\r\n    }\r\n    if (stderr) {\r\n      console.log(`stderr: ${stderr}`);\r\n      return;\r\n    }\r\n    console.log(command);\r\n  };\r\n\r\nexport { transformToAnswers, removeNonLetterCharacters, createResultLog };\r\n","import { PartsBranchName } from \"./types\";\r\nimport {\r\n  getBranchType,\r\n  getProjectName,\r\n  getTaskName,\r\n  getTaskNumber,\r\n} from \"./utils/property_getters\";\r\n\r\nconst CONFIG_FILE_NAME = \"cbconfig.json\";\r\n\r\nconst DEFAULT_TASK_NAME_DELIMITER = \"_\";\r\nconst DEFAULT_BRANCH_NAME_TEMPLATE =\r\n  \"<branch_type>/<project_name>-<task_id>-<task_name>\";\r\nconst DEFAULT_IS_AUTO_CHECKOUT = false;\r\n\r\nconst PROPERTY_MAP: Record<PartsBranchName, () => any> = {\r\n  branch_type: getBranchType,\r\n  project_name: getProjectName,\r\n  task_id: getTaskNumber,\r\n  task_name: getTaskName,\r\n};\r\n\r\nexport {\r\n  DEFAULT_IS_AUTO_CHECKOUT,\r\n  DEFAULT_TASK_NAME_DELIMITER,\r\n  DEFAULT_BRANCH_NAME_TEMPLATE,\r\n  PROPERTY_MAP,\r\n  CONFIG_FILE_NAME,\r\n};\r\n","import {\n  getBranchTypes,\n  getProjectNames,\n  getTaskNameDelimiter,\n} from \"./json_getters\";\nimport inquirer from \"inquirer\";\nimport { tcd } from \"./tcd\";\nimport { transformToAnswers } from \"./helpers\";\n\nconst getBranchType = tcd(async () => {\n  const branchTypes = getBranchTypes();\n  if (branchTypes.length === 1) return branchTypes[0];\n\n  const answers = transformToAnswers(branchTypes);\n  const question = {\n    message: \"Select branch type\",\n    name: \"branch_type\",\n    type: \"list\",\n    choices: answers,\n  };\n\n  const answer = await inquirer.prompt([question]);\n\n  return answer[question.name];\n});\n\nconst getProjectName = tcd(async () => {\n  const questionName = \"project_name\";\n  const projectNames = getProjectNames();\n  if (projectNames.length === 1) return projectNames[0];\n\n  const answers = transformToAnswers(projectNames);\n  const question = {\n    message: \"Select project name\",\n    name: questionName,\n    type: \"list\",\n    choices: answers,\n  };\n\n  const answer = await inquirer.prompt([question]);\n\n  return answer[questionName];\n});\n\nconst getTaskNumber = tcd(async () => {\n  const question = {\n    message: \"Type task id\",\n    name: \"task_id\",\n    type: \"number\",\n  };\n\n  const answer = await inquirer.prompt([question]);\n\n  return answer[question.name];\n});\n\nconst getTaskName = tcd(async () => {\n  const question = {\n    message: \"Type task name\",\n    name: \"task_name\",\n    type: \"input\",\n  };\n\n  const answer = await inquirer.prompt([question]);\n  const delimiter = getTaskNameDelimiter();\n\n  return answer[question.name].trim().replace(/\\W/gi, delimiter);\n});\n\nexport { getBranchType, getTaskName, getTaskNumber, getProjectName };\n","import { Config } from \"../types\";\r\nimport {\r\n  CONFIG_FILE_NAME,\r\n  DEFAULT_BRANCH_NAME_TEMPLATE,\r\n  DEFAULT_IS_AUTO_CHECKOUT,\r\n  DEFAULT_TASK_NAME_DELIMITER,\r\n} from \"../constants\";\r\nimport { findUpSync } from \"find-up\";\r\nimport fs from \"fs\";\r\nimport { tcd } from \"./tcd\";\r\n\r\nconst readConfig = () => {\r\n  let config: Config | null = null;\r\n\r\n  const resolve = tcd(() => {\r\n    const pkg = findUpSync(CONFIG_FILE_NAME, { cwd: process.cwd() });\r\n    config = JSON.parse(fs.readFileSync(pkg as string, \"utf8\"));\r\n    return config;\r\n  });\r\n\r\n  return () => config ?? resolve();\r\n};\r\n\r\nconst getConfig = readConfig();\r\n\r\nconst getProperty = <T extends keyof Config>(name: T): Config[T] => {\r\n  const config = getConfig();\r\n  if (!config) throw new Error(`You need to create file cbconfig.json`);\r\n  if (config[name] == null) throw new Error(`You need to add ${name} property`);\r\n  return config[name];\r\n};\r\n\r\nconst getBranchTypes = (): string[] => {\r\n  const result = getProperty(\"branch_types\");\r\n  return Array.isArray(result) ? result : [result];\r\n};\r\n\r\nconst getProjectNames = (): string[] => {\r\n  const result = getProperty(\"project_names\");\r\n  return Array.isArray(result) ? result : [result];\r\n};\r\n\r\nconst getTaskNameDelimiter = (): string =>\r\n  getProperty(\"task_name_delimiter\") ?? DEFAULT_TASK_NAME_DELIMITER;\r\n\r\nconst getBranchNameTemplate = (): string =>\r\n  getProperty(\"branch_name_template\") ?? DEFAULT_BRANCH_NAME_TEMPLATE;\r\n\r\nconst getIsAutoCheckout = (): boolean =>\r\n  getProperty(\"autoCheckout\") ?? DEFAULT_IS_AUTO_CHECKOUT;\r\n\r\nexport {\r\n  getProperty,\r\n  getIsAutoCheckout,\r\n  getBranchNameTemplate,\r\n  getBranchTypes,\r\n  getProjectNames,\r\n  getTaskNameDelimiter,\r\n};\r\n","const tryCatchDecorator =\n  (fn: Function, onRejected: (err: unknown) => any) =>\n  (...args: any[]) => {\n    try {\n      return fn(...args);\n    } catch (err) {\n      return onRejected(err);\n    }\n  };\n\nconst defaultTryCatchDecorator = (fn: Function) =>\n  tryCatchDecorator(fn, (err) => {\n    console.error(err);\n  });\n\nexport const tcd = defaultTryCatchDecorator;\n"],"names":[],"version":3,"file":"index.js.map"}